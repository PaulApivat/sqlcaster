import Head from "next/head";
import React, { useState } from "react";

import Schema from "components/Schema";
import QueryResults from "components/QueryResults";

import styles from "../styles/Home.module.css";

export default function Home({}) {
  const [showSchema, setShowSchema] = useState(false);
  const handleSchemaClick = () => setShowSchema(!showSchema);

  const [showQueryResults, setShowQueryResults] = useState(false);
  const handleQueryClick = () => setShowQueryResults(!showQueryResults);

  return (
    <div className={styles.container}>
      <Head>
        <title>SQLcaster</title>
        <meta
          name="description"
          content="Explore Farcaster data with SQL using ROAPI"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>SQLcaster</h1>
        <h3 id="library-title">Search Farcaster with SQL</h3>
        <button onClick={handleSchemaClick}>
          {showSchema ? "Hide Schema" : "Show Schema"}
        </button>
        {showSchema && <Schema />}
        <div id="library-form">
          {/* <p contentEditable id="library-input" className="librarySelect">
            select * from casts reactions IS NOT NULL ORDER BY reactions DESC
            LIMIT 10;
          </p> */}
          <div>
            <button onClick={handleQueryClick} id="library-button">
              Submit Query
            </button>
            <div className="btn" id="library-lazy">
              I'm Feeling Lazy
            </div>
            <div className="btn" id="download">
              Download CSV
            </div>
            <div className="btn" id="btn-history">
              Query History
            </div>
          </div>
        </div>
        {showQueryResults && (
          <QueryResults
            query={`select username from casts where username = 'whatrocks' limit 2`}
          />
        )}
        <div id="history"></div>
      </main>
      <footer>
        <h4>About SQLcaster</h4>
        <p>
          SQLcaster's "frontend" is a static client-side fetching page and its
          "backend" is an autogenerated REST API accepting SQL queries via
          <a href="https://roapi.github.io/docs" target="_blank">
            ROAPI
          </a>
          hosted on
          <a href="https://replit.com/@whatrocks/sqlcaster" target="_blank">
            Replit
          </a>
          . This site is intended to be fun, experimental way to explore
          messages ("casts") on the
          <a href="https://farcaster.xyz" target="_blank">
            Farcaster
          </a>
          protocol. Contributions and ideas would be wonderful - here's the open
          source
          <a href="https://github.com/whatrocks/sqlcaster" target="_blank">
            repo
          </a>
          . SQLcaster was created by
          <a href="https://twitter.com/whatrocks" target="_blank">
            @whatrocks
          </a>
          .
        </p>
      </footer>
    </div>
  );
}
